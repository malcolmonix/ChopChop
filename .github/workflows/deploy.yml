name: ChopChop CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/chopchop

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install --no-audit --no-fund --legacy-peer-deps
          
      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: true
        
      - name: Run TypeScript check
        run: npm run type-check --if-present
        continue-on-error: true
        
      - name: Run unit tests
        run: npm test --if-present
        continue-on-error: true

  e2e-test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install --no-audit --no-fund --legacy-peer-deps
          
      - name: Install Playwright browsers
        run: |
          if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
            npx playwright install chromium --with-deps
          else
            echo "No Playwright config found, skipping browser installation"
          fi
        continue-on-error: true
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
          NEXT_PUBLIC_APP_NAME: ChopChop
        
      - name: Run E2E tests
        run: |
          if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
            npx playwright test --reporter=list
          else
            echo "No Playwright config found, skipping E2E tests"
          fi
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install --no-audit --no-fund --legacy-peer-deps
          
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://145.14.158.29:4000/graphql
          NEXT_PUBLIC_APP_NAME: ChopChop
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_APP_NAME=${{ vars.NEXT_PUBLIC_APP_NAME }}
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_GRAPHQL_ENDPOINT=${{ vars.NEXT_PUBLIC_GRAPHQL_ENDPOINT }}
            NEXT_PUBLIC_SERVER_URL=${{ vars.NEXT_PUBLIC_SERVER_URL }}
            NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
            NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
            NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
            NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://chopchop.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 145.14.158.29 >> ~/.ssh/known_hosts
          
      - name: Debug SSH key
        run: |
          echo "SSH key file size:"
          wc -c ~/.ssh/id_rsa
          echo "SSH key format check:"
          head -1 ~/.ssh/id_rsa
          tail -1 ~/.ssh/id_rsa
          echo "SSH key validation:"
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "SSH key validation failed"
          
      - name: Test SSH connection
        run: |
          ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa root@145.14.158.29 'echo "SSH connection successful"' || {
            echo "SSH connection failed. Trying alternative approaches..."
            echo "Checking if password auth is available:"
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o PreferredAuthentications=password root@145.14.158.29 'echo "Password auth works"' || echo "Password auth also failed"
          }
          
      - name: Deploy to VPS
        run: |
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa root@145.14.158.29 'echo "Connection test"'; then
            echo "SSH connection successful, proceeding with deployment..."
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@145.14.158.29 '
              # Create app directory
              mkdir -p /opt/chopchop
              cd /opt/chopchop
              
              # Login to GitHub Container Registry
              echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
              
              # Pull latest image
              docker pull ${{ needs.build.outputs.image-tag }} || docker pull ghcr.io/${{ github.repository_owner }}/chopchop:latest
              
              # Stop and remove existing container
              docker stop chopchop-app || true
              docker rm chopchop-app || true
              
              # Run new container with all environment variables
              docker run -d \
                --name chopchop-app \
                --restart unless-stopped \
                -p 3000:3000 \
                -e NODE_ENV=production \
                -e NEXT_PUBLIC_SERVER_URL="${{ vars.NEXT_PUBLIC_SERVER_URL }}" \
                -e NEXT_PUBLIC_API_URL="${{ vars.NEXT_PUBLIC_API_URL }}" \
                -e NEXT_PUBLIC_GRAPHQL_ENDPOINT="${{ vars.NEXT_PUBLIC_GRAPHQL_ENDPOINT }}" \
                -e NEXT_PUBLIC_APP_NAME="${{ vars.NEXT_PUBLIC_APP_NAME }}" \
                -e NEXTAUTH_URL="${{ vars.NEXTAUTH_URL }}" \
                -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
                -e NEXT_PUBLIC_FIREBASE_API_KEY="${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
                -e NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
                -e NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
                -e NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
                -e NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
                -e NEXT_PUBLIC_FIREBASE_APP_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" \
                -e NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}" \
                ${{ needs.build.outputs.image-tag }} || \
              docker run -d \
                --name chopchop-app \
                --restart unless-stopped \
                -p 3000:3000 \
                -e NODE_ENV=production \
                -e NEXT_PUBLIC_SERVER_URL="${{ vars.NEXT_PUBLIC_SERVER_URL }}" \
                -e NEXT_PUBLIC_API_URL="${{ vars.NEXT_PUBLIC_API_URL }}" \
                -e NEXT_PUBLIC_GRAPHQL_ENDPOINT="${{ vars.NEXT_PUBLIC_GRAPHQL_ENDPOINT }}" \
                -e NEXT_PUBLIC_APP_NAME="${{ vars.NEXT_PUBLIC_APP_NAME }}" \
                -e NEXTAUTH_URL="${{ vars.NEXTAUTH_URL }}" \
                -e NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
                -e NEXT_PUBLIC_FIREBASE_API_KEY="${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
                -e NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
                -e NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
                -e NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
                -e NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
                -e NEXT_PUBLIC_FIREBASE_APP_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" \
                -e NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}" \
                ghcr.io/${{ github.repository_owner }}/chopchop:latest
              
              # Health check
              sleep 15
              curl -f http://localhost:3000 || echo "Health check failed"
              
              # Clean up old images
              docker image prune -f --filter "until=24h"
            '
          else
            echo "SSH connection failed. Please check:"
            echo "1. VPS_SSH_KEY secret contains the correct private key"
            echo "2. The corresponding public key is in ~/.ssh/authorized_keys on the VPS"
            echo "3. SSH service is running on the VPS"
            echo "4. The VPS allows root login or the user has proper permissions"
            exit 1
          fi
          
      - name: Verify deployment
        run: |
          # First verify the container is running on VPS
          echo "Checking if container is running on VPS..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@145.14.158.29 '
            if docker ps | grep -q chopchop-app; then
              echo "✅ Container is running"
              docker logs chopchop-app --tail 20
              
              # Test local health check
              echo "Testing local health check..."
              curl -f http://localhost:3000/api/health || echo "Local health check failed"
            else
              echo "❌ Container is not running!"
              docker logs chopchop-app --tail 50 || true
              exit 1
            fi
          '
          
          # Then verify external access (allow failure for now if domain not configured)
          echo "Testing external access..."
          if curl -f -m 10 https://chopchop.com/api/health 2>/dev/null; then
            echo "✅ External health check passed"
          else
            echo "⚠️ External health check failed - domain may not be configured yet"
            echo "App is running on: http://145.14.158.29:3000"
          fi
          
      - name: Notify deployment success
        if: success()
        run: |
          echo " ChopChop deployed successfully to production!"
          echo " URL: https://chopchop.com"
          echo " Image: ${{ needs.build.outputs.image-tag }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo " ChopChop deployment failed!"
          echo "Check the logs above for details."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0' # Do not fail the pipeline; upload report instead
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Determine test base URL
        run: |
          if [ -n "${{ vars.PRODUCTION_URL }}" ]; then
            echo "BASE_URL=${{ vars.PRODUCTION_URL }}" >> $GITHUB_ENV
          else
            echo "BASE_URL=http://145.14.158.29:3000" >> $GITHUB_ENV
          fi
          echo "Using BASE_URL=$BASE_URL"
      
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
      
      - name: Create Lighthouse config
        run: |
          cat > lighthouserc.json <<'EOF'
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": { "chromeFlags": "--no-sandbox --disable-dev-shm-usage" }
              },
              "upload": { "target": "temporary-public-storage" }
            }
          }
          EOF
          # Inject dynamic URLs (BASE_URL)
          urls=("$BASE_URL" "$BASE_URL/restaurants" "$BASE_URL/menu")
          jq --argjson urls "$(printf '%s\n' "${urls[@]}" | jq -R . | jq -s .)" '.ci.collect.url = $urls' lighthouserc.json > lighthouserc.tmp
          mv lighthouserc.tmp lighthouserc.json
          echo "Generated lighthouserc.json:" && cat lighthouserc.json
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ./lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true
