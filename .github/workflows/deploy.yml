name: ChopChop CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: malcolmonix/chopchop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, e2e]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npm run type-check
        
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:ci
        
      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://chopchop.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
          
      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no chopchop@145.14.158.29 '
            # Navigate to application directory
            cd /opt/chopchop
            
            # Pull latest image
            docker pull ${{ needs.build.outputs.image-tag }}
            
            # Update docker-compose to use new image
            sed -i "s|image: ghcr.io/malcolmonix/chopchop:.*|image: ${{ needs.build.outputs.image-tag }}|" docker-compose.yml
            
            # Deploy with zero-downtime
            docker-compose up -d --no-deps chopchop
            
            # Health check
            sleep 30
            if ! curl -f http://localhost:3000/api/health; then
              echo "Health check failed, rolling back..."
              docker-compose restart chopchop
              exit 1
            fi
            
            # Clean up old images
            docker image prune -f
          '
          
      - name: Verify deployment
        run: |
          curl -f https://chopchop.com/api/health || exit 1
          
      - name: Notify deployment success
        if: success()
        run: |
          echo " ChopChop deployed successfully to production!"
          echo " URL: https://chopchop.com"
          echo " Image: ${{ needs.build.outputs.image-tag }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo " ChopChop deployment failed!"
          echo "Check the logs above for details."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: sarif
          output: trivy-results.sarif
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://chopchop.com
            https://chopchop.com/restaurants
            https://chopchop.com/menu
          uploadArtifacts: true
          temporaryPublicStorage: true
